The first version of our code uses regular inheritance

#include <QApplication>
#include <QDebug>
#include "student.h"
#include "undergrad.h"
#include "gradstudent.h"
#include <QTextStream>
#include <QDebug>

static QTextStream cout(stdout, QIODevice::WriteOnly);


/* A student is still a student */
void graduate(Student *student)
{
    qDebug() << "\nThe following "
         << student->getClassName()
         << " has graduated\n"
         << student->toString() << "\n";
}

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);


//    GradStudentis a Student,in the sense that a GradStudent object can be used
//    wherever a Student object can be used. The client code shown in this example
//    creates some instances and performs operations on a GradStudent or an
//    Undergrad instance directly and also indirectly, through pointers.

    Undergrad us("Frodo", 5562, "Ring Theory", 4);
    GradStudent gs("Bilbo", 3029, "History", 6, GradStudent::fellowship);

    qDebug() << "Here is the data for the two students:\n";
    qDebug() << gs.toString() << "\n";
    qDebug() << us.toString() << "\n";

    qDebug() << "\nHere is what happens when they graduate:\n";

    graduate(&us);
    graduate(&gs);




    return a.exec();
}


Here in the graduate function we can pass any object as long as it is a Student, so we can use Undergrad and GradStudent and pass instances
to the function.
However the function calls in graduate, that being getClassName() and toString() are all calling base class implementations.
This is not what we want.

 It would be more appropriate to use run-time binding for indirect function
 calls to determine which toString()is appropriate for each object.
 Because of its C roots, C++ has a compiler that attempts to bind function invocations at compile time,
 for performance reasons instead of run-time.

With inheritance and base classpointers, the compiler can have no way of knowing what type of object it is
operating on. In the absence of run-time checking, an inappropriate function can be
 called. C++ requires the use of a special keyword to enable run-time binding on
 function calls via pointers and references. The keyword is virtual, and it enables
 polymorphism

Using the keyboard virtual we can use run-time binding and this will allow the compiler
to make the appropriate function call.

So if we intead to make function calls throught base class pointers to derive class methods use VIRTUAL
If we intend to make function calls via reference objects say in a function then again make that method virtual in the parent.


The virtual Keyword:
Virtual Functions: When you declare a function as virtual in the base class, you enable derived classes to override this function.
The overridden function will be called based on the actual object type,
even if the function is called through a base class pointer or reference.

Enabling Polymorphism: This is crucial when you have a function that operates on base class pointers or references and you want
to call the derived class's version of the function.


Derivation with Polymorphism
 We can now discuss a very powerful feature of object-oriented programming:
 polymorphism.

The use of the keyword virtual in the BASE CLASS

By simply adding the keyword virtual to at least one member function we have
 created a polymorphic type. When virtual is specified on a function, it
 becomes a method in that class and all derived classes

Notice that we now see [GradStudent] and [UnderGrad] in the output,thanks to the
 fact that getClassName()isvirtual.Thereisstill aproblemwiththeoutputof
 graduate() for the GradStudent,however.TheSupport piece is missing


